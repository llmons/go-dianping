// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-dianping/internal/model"
)

func newVoucherOrder(db *gorm.DB, opts ...gen.DOOption) voucherOrder {
	_voucherOrder := voucherOrder{}

	_voucherOrder.voucherOrderDo.UseDB(db, opts...)
	_voucherOrder.voucherOrderDo.UseModel(&model.VoucherOrder{})

	tableName := _voucherOrder.voucherOrderDo.TableName()
	_voucherOrder.ALL = field.NewAsterisk(tableName)
	_voucherOrder.ID = field.NewInt64(tableName, "id")
	_voucherOrder.UserID = field.NewUint64(tableName, "user_id")
	_voucherOrder.VoucherID = field.NewUint64(tableName, "voucher_id")
	_voucherOrder.PayType = field.NewUint8(tableName, "pay_type")
	_voucherOrder.Status = field.NewUint8(tableName, "status")
	_voucherOrder.CreateTime = field.NewTime(tableName, "create_time")
	_voucherOrder.PayTime = field.NewTime(tableName, "pay_time")
	_voucherOrder.UseTime = field.NewTime(tableName, "use_time")
	_voucherOrder.RefundTime = field.NewTime(tableName, "refund_time")
	_voucherOrder.UpdateTime = field.NewTime(tableName, "update_time")

	_voucherOrder.fillFieldMap()

	return _voucherOrder
}

type voucherOrder struct {
	voucherOrderDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	UserID     field.Uint64 // 下单的用户id
	VoucherID  field.Uint64 // 购买的代金券id
	PayType    field.Uint8  // 支付方式 1：余额支付；2：支付宝；3：微信
	Status     field.Uint8  // 订单状态，1：未支付；2：已支付；3：已核销；4：已取消；5：退款中；6：已退款
	CreateTime field.Time   // 下单时间
	PayTime    field.Time   // 支付时间
	UseTime    field.Time   // 核销时间
	RefundTime field.Time   // 退款时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (v voucherOrder) Table(newTableName string) *voucherOrder {
	v.voucherOrderDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v voucherOrder) As(alias string) *voucherOrder {
	v.voucherOrderDo.DO = *(v.voucherOrderDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *voucherOrder) updateTableName(table string) *voucherOrder {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.UserID = field.NewUint64(table, "user_id")
	v.VoucherID = field.NewUint64(table, "voucher_id")
	v.PayType = field.NewUint8(table, "pay_type")
	v.Status = field.NewUint8(table, "status")
	v.CreateTime = field.NewTime(table, "create_time")
	v.PayTime = field.NewTime(table, "pay_time")
	v.UseTime = field.NewTime(table, "use_time")
	v.RefundTime = field.NewTime(table, "refund_time")
	v.UpdateTime = field.NewTime(table, "update_time")

	v.fillFieldMap()

	return v
}

func (v *voucherOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *voucherOrder) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 10)
	v.fieldMap["id"] = v.ID
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["voucher_id"] = v.VoucherID
	v.fieldMap["pay_type"] = v.PayType
	v.fieldMap["status"] = v.Status
	v.fieldMap["create_time"] = v.CreateTime
	v.fieldMap["pay_time"] = v.PayTime
	v.fieldMap["use_time"] = v.UseTime
	v.fieldMap["refund_time"] = v.RefundTime
	v.fieldMap["update_time"] = v.UpdateTime
}

func (v voucherOrder) clone(db *gorm.DB) voucherOrder {
	v.voucherOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v voucherOrder) replaceDB(db *gorm.DB) voucherOrder {
	v.voucherOrderDo.ReplaceDB(db)
	return v
}

type voucherOrderDo struct{ gen.DO }

type IVoucherOrderDo interface {
	gen.SubQuery
	Debug() IVoucherOrderDo
	WithContext(ctx context.Context) IVoucherOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVoucherOrderDo
	WriteDB() IVoucherOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVoucherOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVoucherOrderDo
	Not(conds ...gen.Condition) IVoucherOrderDo
	Or(conds ...gen.Condition) IVoucherOrderDo
	Select(conds ...field.Expr) IVoucherOrderDo
	Where(conds ...gen.Condition) IVoucherOrderDo
	Order(conds ...field.Expr) IVoucherOrderDo
	Distinct(cols ...field.Expr) IVoucherOrderDo
	Omit(cols ...field.Expr) IVoucherOrderDo
	Join(table schema.Tabler, on ...field.Expr) IVoucherOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVoucherOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVoucherOrderDo
	Group(cols ...field.Expr) IVoucherOrderDo
	Having(conds ...gen.Condition) IVoucherOrderDo
	Limit(limit int) IVoucherOrderDo
	Offset(offset int) IVoucherOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVoucherOrderDo
	Unscoped() IVoucherOrderDo
	Create(values ...*model.VoucherOrder) error
	CreateInBatches(values []*model.VoucherOrder, batchSize int) error
	Save(values ...*model.VoucherOrder) error
	First() (*model.VoucherOrder, error)
	Take() (*model.VoucherOrder, error)
	Last() (*model.VoucherOrder, error)
	Find() ([]*model.VoucherOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VoucherOrder, err error)
	FindInBatches(result *[]*model.VoucherOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VoucherOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVoucherOrderDo
	Assign(attrs ...field.AssignExpr) IVoucherOrderDo
	Joins(fields ...field.RelationField) IVoucherOrderDo
	Preload(fields ...field.RelationField) IVoucherOrderDo
	FirstOrInit() (*model.VoucherOrder, error)
	FirstOrCreate() (*model.VoucherOrder, error)
	FindByPage(offset int, limit int) (result []*model.VoucherOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVoucherOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result *model.VoucherOrder, err error)
}

// GetByID
// SELECT * FROM @@table WHERE id=@id
func (v voucherOrderDo) GetByID(id int) (result *model.VoucherOrder, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM tb_voucher_order WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (v voucherOrderDo) Debug() IVoucherOrderDo {
	return v.withDO(v.DO.Debug())
}

func (v voucherOrderDo) WithContext(ctx context.Context) IVoucherOrderDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v voucherOrderDo) ReadDB() IVoucherOrderDo {
	return v.Clauses(dbresolver.Read)
}

func (v voucherOrderDo) WriteDB() IVoucherOrderDo {
	return v.Clauses(dbresolver.Write)
}

func (v voucherOrderDo) Session(config *gorm.Session) IVoucherOrderDo {
	return v.withDO(v.DO.Session(config))
}

func (v voucherOrderDo) Clauses(conds ...clause.Expression) IVoucherOrderDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v voucherOrderDo) Returning(value interface{}, columns ...string) IVoucherOrderDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v voucherOrderDo) Not(conds ...gen.Condition) IVoucherOrderDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v voucherOrderDo) Or(conds ...gen.Condition) IVoucherOrderDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v voucherOrderDo) Select(conds ...field.Expr) IVoucherOrderDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v voucherOrderDo) Where(conds ...gen.Condition) IVoucherOrderDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v voucherOrderDo) Order(conds ...field.Expr) IVoucherOrderDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v voucherOrderDo) Distinct(cols ...field.Expr) IVoucherOrderDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v voucherOrderDo) Omit(cols ...field.Expr) IVoucherOrderDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v voucherOrderDo) Join(table schema.Tabler, on ...field.Expr) IVoucherOrderDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v voucherOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVoucherOrderDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v voucherOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IVoucherOrderDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v voucherOrderDo) Group(cols ...field.Expr) IVoucherOrderDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v voucherOrderDo) Having(conds ...gen.Condition) IVoucherOrderDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v voucherOrderDo) Limit(limit int) IVoucherOrderDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v voucherOrderDo) Offset(offset int) IVoucherOrderDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v voucherOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVoucherOrderDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v voucherOrderDo) Unscoped() IVoucherOrderDo {
	return v.withDO(v.DO.Unscoped())
}

func (v voucherOrderDo) Create(values ...*model.VoucherOrder) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v voucherOrderDo) CreateInBatches(values []*model.VoucherOrder, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v voucherOrderDo) Save(values ...*model.VoucherOrder) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v voucherOrderDo) First() (*model.VoucherOrder, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoucherOrder), nil
	}
}

func (v voucherOrderDo) Take() (*model.VoucherOrder, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoucherOrder), nil
	}
}

func (v voucherOrderDo) Last() (*model.VoucherOrder, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoucherOrder), nil
	}
}

func (v voucherOrderDo) Find() ([]*model.VoucherOrder, error) {
	result, err := v.DO.Find()
	return result.([]*model.VoucherOrder), err
}

func (v voucherOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VoucherOrder, err error) {
	buf := make([]*model.VoucherOrder, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v voucherOrderDo) FindInBatches(result *[]*model.VoucherOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v voucherOrderDo) Attrs(attrs ...field.AssignExpr) IVoucherOrderDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v voucherOrderDo) Assign(attrs ...field.AssignExpr) IVoucherOrderDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v voucherOrderDo) Joins(fields ...field.RelationField) IVoucherOrderDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v voucherOrderDo) Preload(fields ...field.RelationField) IVoucherOrderDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v voucherOrderDo) FirstOrInit() (*model.VoucherOrder, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoucherOrder), nil
	}
}

func (v voucherOrderDo) FirstOrCreate() (*model.VoucherOrder, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VoucherOrder), nil
	}
}

func (v voucherOrderDo) FindByPage(offset int, limit int) (result []*model.VoucherOrder, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v voucherOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v voucherOrderDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v voucherOrderDo) Delete(models ...*model.VoucherOrder) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *voucherOrderDo) withDO(do gen.Dao) *voucherOrderDo {
	v.DO = *do.(*gen.DO)
	return v
}
