// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-dianping/internal/model"
)

func newSeckillVoucher(db *gorm.DB, opts ...gen.DOOption) seckillVoucher {
	_seckillVoucher := seckillVoucher{}

	_seckillVoucher.seckillVoucherDo.UseDB(db, opts...)
	_seckillVoucher.seckillVoucherDo.UseModel(&model.SeckillVoucher{})

	tableName := _seckillVoucher.seckillVoucherDo.TableName()
	_seckillVoucher.ALL = field.NewAsterisk(tableName)
	_seckillVoucher.VoucherID = field.NewUint64(tableName, "voucher_id")
	_seckillVoucher.Stock = field.NewInt32(tableName, "stock")
	_seckillVoucher.CreateTime = field.NewTime(tableName, "create_time")
	_seckillVoucher.BeginTime = field.NewTime(tableName, "begin_time")
	_seckillVoucher.EndTime = field.NewTime(tableName, "end_time")
	_seckillVoucher.UpdateTime = field.NewTime(tableName, "update_time")

	_seckillVoucher.fillFieldMap()

	return _seckillVoucher
}

// seckillVoucher 秒杀优惠券表，与优惠券是一对一关系
type seckillVoucher struct {
	seckillVoucherDo

	ALL        field.Asterisk
	VoucherID  field.Uint64 // 关联的优惠券的id
	Stock      field.Int32  // 库存
	CreateTime field.Time   // 创建时间
	BeginTime  field.Time   // 生效时间
	EndTime    field.Time   // 失效时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s seckillVoucher) Table(newTableName string) *seckillVoucher {
	s.seckillVoucherDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seckillVoucher) As(alias string) *seckillVoucher {
	s.seckillVoucherDo.DO = *(s.seckillVoucherDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seckillVoucher) updateTableName(table string) *seckillVoucher {
	s.ALL = field.NewAsterisk(table)
	s.VoucherID = field.NewUint64(table, "voucher_id")
	s.Stock = field.NewInt32(table, "stock")
	s.CreateTime = field.NewTime(table, "create_time")
	s.BeginTime = field.NewTime(table, "begin_time")
	s.EndTime = field.NewTime(table, "end_time")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *seckillVoucher) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seckillVoucher) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["voucher_id"] = s.VoucherID
	s.fieldMap["stock"] = s.Stock
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["begin_time"] = s.BeginTime
	s.fieldMap["end_time"] = s.EndTime
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s seckillVoucher) clone(db *gorm.DB) seckillVoucher {
	s.seckillVoucherDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seckillVoucher) replaceDB(db *gorm.DB) seckillVoucher {
	s.seckillVoucherDo.ReplaceDB(db)
	return s
}

type seckillVoucherDo struct{ gen.DO }

type ISeckillVoucherDo interface {
	gen.SubQuery
	Debug() ISeckillVoucherDo
	WithContext(ctx context.Context) ISeckillVoucherDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeckillVoucherDo
	WriteDB() ISeckillVoucherDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeckillVoucherDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeckillVoucherDo
	Not(conds ...gen.Condition) ISeckillVoucherDo
	Or(conds ...gen.Condition) ISeckillVoucherDo
	Select(conds ...field.Expr) ISeckillVoucherDo
	Where(conds ...gen.Condition) ISeckillVoucherDo
	Order(conds ...field.Expr) ISeckillVoucherDo
	Distinct(cols ...field.Expr) ISeckillVoucherDo
	Omit(cols ...field.Expr) ISeckillVoucherDo
	Join(table schema.Tabler, on ...field.Expr) ISeckillVoucherDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeckillVoucherDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeckillVoucherDo
	Group(cols ...field.Expr) ISeckillVoucherDo
	Having(conds ...gen.Condition) ISeckillVoucherDo
	Limit(limit int) ISeckillVoucherDo
	Offset(offset int) ISeckillVoucherDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeckillVoucherDo
	Unscoped() ISeckillVoucherDo
	Create(values ...*model.SeckillVoucher) error
	CreateInBatches(values []*model.SeckillVoucher, batchSize int) error
	Save(values ...*model.SeckillVoucher) error
	First() (*model.SeckillVoucher, error)
	Take() (*model.SeckillVoucher, error)
	Last() (*model.SeckillVoucher, error)
	Find() ([]*model.SeckillVoucher, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeckillVoucher, err error)
	FindInBatches(result *[]*model.SeckillVoucher, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeckillVoucher) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeckillVoucherDo
	Assign(attrs ...field.AssignExpr) ISeckillVoucherDo
	Joins(fields ...field.RelationField) ISeckillVoucherDo
	Preload(fields ...field.RelationField) ISeckillVoucherDo
	FirstOrInit() (*model.SeckillVoucher, error)
	FirstOrCreate() (*model.SeckillVoucher, error)
	FindByPage(offset int, limit int) (result []*model.SeckillVoucher, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeckillVoucherDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id uint64) (result *model.SeckillVoucher, err error)
}

// GetByID
// SELECT * FROM @@table WHERE id=@id
func (s seckillVoucherDo) GetByID(id uint64) (result *model.SeckillVoucher, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM tb_seckill_voucher WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s seckillVoucherDo) Debug() ISeckillVoucherDo {
	return s.withDO(s.DO.Debug())
}

func (s seckillVoucherDo) WithContext(ctx context.Context) ISeckillVoucherDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seckillVoucherDo) ReadDB() ISeckillVoucherDo {
	return s.Clauses(dbresolver.Read)
}

func (s seckillVoucherDo) WriteDB() ISeckillVoucherDo {
	return s.Clauses(dbresolver.Write)
}

func (s seckillVoucherDo) Session(config *gorm.Session) ISeckillVoucherDo {
	return s.withDO(s.DO.Session(config))
}

func (s seckillVoucherDo) Clauses(conds ...clause.Expression) ISeckillVoucherDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seckillVoucherDo) Returning(value interface{}, columns ...string) ISeckillVoucherDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seckillVoucherDo) Not(conds ...gen.Condition) ISeckillVoucherDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seckillVoucherDo) Or(conds ...gen.Condition) ISeckillVoucherDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seckillVoucherDo) Select(conds ...field.Expr) ISeckillVoucherDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seckillVoucherDo) Where(conds ...gen.Condition) ISeckillVoucherDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seckillVoucherDo) Order(conds ...field.Expr) ISeckillVoucherDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seckillVoucherDo) Distinct(cols ...field.Expr) ISeckillVoucherDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seckillVoucherDo) Omit(cols ...field.Expr) ISeckillVoucherDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seckillVoucherDo) Join(table schema.Tabler, on ...field.Expr) ISeckillVoucherDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seckillVoucherDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeckillVoucherDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seckillVoucherDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeckillVoucherDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seckillVoucherDo) Group(cols ...field.Expr) ISeckillVoucherDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seckillVoucherDo) Having(conds ...gen.Condition) ISeckillVoucherDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seckillVoucherDo) Limit(limit int) ISeckillVoucherDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seckillVoucherDo) Offset(offset int) ISeckillVoucherDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seckillVoucherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeckillVoucherDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seckillVoucherDo) Unscoped() ISeckillVoucherDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seckillVoucherDo) Create(values ...*model.SeckillVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seckillVoucherDo) CreateInBatches(values []*model.SeckillVoucher, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seckillVoucherDo) Save(values ...*model.SeckillVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seckillVoucherDo) First() (*model.SeckillVoucher, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillVoucher), nil
	}
}

func (s seckillVoucherDo) Take() (*model.SeckillVoucher, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillVoucher), nil
	}
}

func (s seckillVoucherDo) Last() (*model.SeckillVoucher, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillVoucher), nil
	}
}

func (s seckillVoucherDo) Find() ([]*model.SeckillVoucher, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeckillVoucher), err
}

func (s seckillVoucherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeckillVoucher, err error) {
	buf := make([]*model.SeckillVoucher, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seckillVoucherDo) FindInBatches(result *[]*model.SeckillVoucher, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seckillVoucherDo) Attrs(attrs ...field.AssignExpr) ISeckillVoucherDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seckillVoucherDo) Assign(attrs ...field.AssignExpr) ISeckillVoucherDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seckillVoucherDo) Joins(fields ...field.RelationField) ISeckillVoucherDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seckillVoucherDo) Preload(fields ...field.RelationField) ISeckillVoucherDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seckillVoucherDo) FirstOrInit() (*model.SeckillVoucher, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillVoucher), nil
	}
}

func (s seckillVoucherDo) FirstOrCreate() (*model.SeckillVoucher, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillVoucher), nil
	}
}

func (s seckillVoucherDo) FindByPage(offset int, limit int) (result []*model.SeckillVoucher, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seckillVoucherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seckillVoucherDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seckillVoucherDo) Delete(models ...*model.SeckillVoucher) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seckillVoucherDo) withDO(do gen.Dao) *seckillVoucherDo {
	s.DO = *do.(*gen.DO)
	return s
}
