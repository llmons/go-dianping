// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-dianping/internal/entity"
)

func newBlogComments(db *gorm.DB, opts ...gen.DOOption) blogComments {
	_blogComments := blogComments{}

	_blogComments.blogCommentsDo.UseDB(db, opts...)
	_blogComments.blogCommentsDo.UseModel(&entity.BlogComments{})

	tableName := _blogComments.blogCommentsDo.TableName()
	_blogComments.ALL = field.NewAsterisk(tableName)
	_blogComments.ID = field.NewUint64(tableName, "id")
	_blogComments.UserID = field.NewUint64(tableName, "user_id")
	_blogComments.BlogID = field.NewUint64(tableName, "blog_id")
	_blogComments.ParentID = field.NewUint64(tableName, "parent_id")
	_blogComments.AnswerID = field.NewUint64(tableName, "answer_id")
	_blogComments.Content = field.NewString(tableName, "content")
	_blogComments.Liked = field.NewUint32(tableName, "liked")
	_blogComments.Status = field.NewUint8(tableName, "status")
	_blogComments.CreateTime = field.NewTime(tableName, "create_time")
	_blogComments.UpdateTime = field.NewTime(tableName, "update_time")

	_blogComments.fillFieldMap()

	return _blogComments
}

type blogComments struct {
	blogCommentsDo

	ALL        field.Asterisk
	ID         field.Uint64 // 主键
	UserID     field.Uint64 // 用户id
	BlogID     field.Uint64 // 探店id
	ParentID   field.Uint64 // 关联的1级评论id，如果是一级评论，则值为0
	AnswerID   field.Uint64 // 回复的评论id
	Content    field.String // 回复的内容
	Liked      field.Uint32 // 点赞数
	Status     field.Uint8  // 状态，0：正常，1：被举报，2：禁止查看
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (b blogComments) Table(newTableName string) *blogComments {
	b.blogCommentsDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b blogComments) As(alias string) *blogComments {
	b.blogCommentsDo.DO = *(b.blogCommentsDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *blogComments) updateTableName(table string) *blogComments {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewUint64(table, "id")
	b.UserID = field.NewUint64(table, "user_id")
	b.BlogID = field.NewUint64(table, "blog_id")
	b.ParentID = field.NewUint64(table, "parent_id")
	b.AnswerID = field.NewUint64(table, "answer_id")
	b.Content = field.NewString(table, "content")
	b.Liked = field.NewUint32(table, "liked")
	b.Status = field.NewUint8(table, "status")
	b.CreateTime = field.NewTime(table, "create_time")
	b.UpdateTime = field.NewTime(table, "update_time")

	b.fillFieldMap()

	return b
}

func (b *blogComments) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *blogComments) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 10)
	b.fieldMap["id"] = b.ID
	b.fieldMap["user_id"] = b.UserID
	b.fieldMap["blog_id"] = b.BlogID
	b.fieldMap["parent_id"] = b.ParentID
	b.fieldMap["answer_id"] = b.AnswerID
	b.fieldMap["content"] = b.Content
	b.fieldMap["liked"] = b.Liked
	b.fieldMap["status"] = b.Status
	b.fieldMap["create_time"] = b.CreateTime
	b.fieldMap["update_time"] = b.UpdateTime
}

func (b blogComments) clone(db *gorm.DB) blogComments {
	b.blogCommentsDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b blogComments) replaceDB(db *gorm.DB) blogComments {
	b.blogCommentsDo.ReplaceDB(db)
	return b
}

type blogCommentsDo struct{ gen.DO }

type IBlogCommentsDo interface {
	gen.SubQuery
	Debug() IBlogCommentsDo
	WithContext(ctx context.Context) IBlogCommentsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBlogCommentsDo
	WriteDB() IBlogCommentsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBlogCommentsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBlogCommentsDo
	Not(conds ...gen.Condition) IBlogCommentsDo
	Or(conds ...gen.Condition) IBlogCommentsDo
	Select(conds ...field.Expr) IBlogCommentsDo
	Where(conds ...gen.Condition) IBlogCommentsDo
	Order(conds ...field.Expr) IBlogCommentsDo
	Distinct(cols ...field.Expr) IBlogCommentsDo
	Omit(cols ...field.Expr) IBlogCommentsDo
	Join(table schema.Tabler, on ...field.Expr) IBlogCommentsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBlogCommentsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBlogCommentsDo
	Group(cols ...field.Expr) IBlogCommentsDo
	Having(conds ...gen.Condition) IBlogCommentsDo
	Limit(limit int) IBlogCommentsDo
	Offset(offset int) IBlogCommentsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBlogCommentsDo
	Unscoped() IBlogCommentsDo
	Create(values ...*entity.BlogComments) error
	CreateInBatches(values []*entity.BlogComments, batchSize int) error
	Save(values ...*entity.BlogComments) error
	First() (*entity.BlogComments, error)
	Take() (*entity.BlogComments, error)
	Last() (*entity.BlogComments, error)
	Find() ([]*entity.BlogComments, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.BlogComments, err error)
	FindInBatches(result *[]*entity.BlogComments, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.BlogComments) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBlogCommentsDo
	Assign(attrs ...field.AssignExpr) IBlogCommentsDo
	Joins(fields ...field.RelationField) IBlogCommentsDo
	Preload(fields ...field.RelationField) IBlogCommentsDo
	FirstOrInit() (*entity.BlogComments, error)
	FirstOrCreate() (*entity.BlogComments, error)
	FindByPage(offset int, limit int) (result []*entity.BlogComments, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBlogCommentsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b blogCommentsDo) Debug() IBlogCommentsDo {
	return b.withDO(b.DO.Debug())
}

func (b blogCommentsDo) WithContext(ctx context.Context) IBlogCommentsDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blogCommentsDo) ReadDB() IBlogCommentsDo {
	return b.Clauses(dbresolver.Read)
}

func (b blogCommentsDo) WriteDB() IBlogCommentsDo {
	return b.Clauses(dbresolver.Write)
}

func (b blogCommentsDo) Session(config *gorm.Session) IBlogCommentsDo {
	return b.withDO(b.DO.Session(config))
}

func (b blogCommentsDo) Clauses(conds ...clause.Expression) IBlogCommentsDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blogCommentsDo) Returning(value interface{}, columns ...string) IBlogCommentsDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blogCommentsDo) Not(conds ...gen.Condition) IBlogCommentsDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blogCommentsDo) Or(conds ...gen.Condition) IBlogCommentsDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blogCommentsDo) Select(conds ...field.Expr) IBlogCommentsDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blogCommentsDo) Where(conds ...gen.Condition) IBlogCommentsDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blogCommentsDo) Order(conds ...field.Expr) IBlogCommentsDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blogCommentsDo) Distinct(cols ...field.Expr) IBlogCommentsDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blogCommentsDo) Omit(cols ...field.Expr) IBlogCommentsDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blogCommentsDo) Join(table schema.Tabler, on ...field.Expr) IBlogCommentsDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blogCommentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBlogCommentsDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blogCommentsDo) RightJoin(table schema.Tabler, on ...field.Expr) IBlogCommentsDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blogCommentsDo) Group(cols ...field.Expr) IBlogCommentsDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blogCommentsDo) Having(conds ...gen.Condition) IBlogCommentsDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blogCommentsDo) Limit(limit int) IBlogCommentsDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blogCommentsDo) Offset(offset int) IBlogCommentsDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blogCommentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBlogCommentsDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blogCommentsDo) Unscoped() IBlogCommentsDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blogCommentsDo) Create(values ...*entity.BlogComments) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blogCommentsDo) CreateInBatches(values []*entity.BlogComments, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blogCommentsDo) Save(values ...*entity.BlogComments) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blogCommentsDo) First() (*entity.BlogComments, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.BlogComments), nil
	}
}

func (b blogCommentsDo) Take() (*entity.BlogComments, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.BlogComments), nil
	}
}

func (b blogCommentsDo) Last() (*entity.BlogComments, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.BlogComments), nil
	}
}

func (b blogCommentsDo) Find() ([]*entity.BlogComments, error) {
	result, err := b.DO.Find()
	return result.([]*entity.BlogComments), err
}

func (b blogCommentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.BlogComments, err error) {
	buf := make([]*entity.BlogComments, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blogCommentsDo) FindInBatches(result *[]*entity.BlogComments, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blogCommentsDo) Attrs(attrs ...field.AssignExpr) IBlogCommentsDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blogCommentsDo) Assign(attrs ...field.AssignExpr) IBlogCommentsDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blogCommentsDo) Joins(fields ...field.RelationField) IBlogCommentsDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blogCommentsDo) Preload(fields ...field.RelationField) IBlogCommentsDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blogCommentsDo) FirstOrInit() (*entity.BlogComments, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.BlogComments), nil
	}
}

func (b blogCommentsDo) FirstOrCreate() (*entity.BlogComments, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.BlogComments), nil
	}
}

func (b blogCommentsDo) FindByPage(offset int, limit int) (result []*entity.BlogComments, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blogCommentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blogCommentsDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blogCommentsDo) Delete(models ...*entity.BlogComments) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blogCommentsDo) withDO(do gen.Dao) *blogCommentsDo {
	b.DO = *do.(*gen.DO)
	return b
}
