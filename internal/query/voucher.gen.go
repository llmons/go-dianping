// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-dianping/internal/model"
)

func newVoucher(db *gorm.DB, opts ...gen.DOOption) voucher {
	_voucher := voucher{}

	_voucher.voucherDo.UseDB(db, opts...)
	_voucher.voucherDo.UseModel(&model.Voucher{})

	tableName := _voucher.voucherDo.TableName()
	_voucher.ALL = field.NewAsterisk(tableName)
	_voucher.ID = field.NewUint64(tableName, "id")
	_voucher.ShopID = field.NewUint64(tableName, "shop_id")
	_voucher.Title = field.NewString(tableName, "title")
	_voucher.SubTitle = field.NewString(tableName, "sub_title")
	_voucher.Rules = field.NewString(tableName, "rules")
	_voucher.PayValue = field.NewUint64(tableName, "pay_value")
	_voucher.ActualValue = field.NewInt64(tableName, "actual_value")
	_voucher.Type = field.NewUint8(tableName, "type")
	_voucher.Status = field.NewUint8(tableName, "status")
	_voucher.CreateTime = field.NewTime(tableName, "create_time")
	_voucher.UpdateTime = field.NewTime(tableName, "update_time")

	_voucher.fillFieldMap()

	return _voucher
}

type voucher struct {
	voucherDo

	ALL         field.Asterisk
	ID          field.Uint64 // 主键
	ShopID      field.Uint64 // 商铺id
	Title       field.String // 代金券标题
	SubTitle    field.String // 副标题
	Rules       field.String // 使用规则
	PayValue    field.Uint64 // 支付金额，单位是分。例如200代表2元
	ActualValue field.Int64  // 抵扣金额，单位是分。例如200代表2元
	Type        field.Uint8  // 0,普通券；1,秒杀券
	Status      field.Uint8  // 1,上架; 2,下架; 3,过期
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (v voucher) Table(newTableName string) *voucher {
	v.voucherDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v voucher) As(alias string) *voucher {
	v.voucherDo.DO = *(v.voucherDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *voucher) updateTableName(table string) *voucher {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint64(table, "id")
	v.ShopID = field.NewUint64(table, "shop_id")
	v.Title = field.NewString(table, "title")
	v.SubTitle = field.NewString(table, "sub_title")
	v.Rules = field.NewString(table, "rules")
	v.PayValue = field.NewUint64(table, "pay_value")
	v.ActualValue = field.NewInt64(table, "actual_value")
	v.Type = field.NewUint8(table, "type")
	v.Status = field.NewUint8(table, "status")
	v.CreateTime = field.NewTime(table, "create_time")
	v.UpdateTime = field.NewTime(table, "update_time")

	v.fillFieldMap()

	return v
}

func (v *voucher) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *voucher) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 14)
	v.fieldMap["id"] = v.ID
	v.fieldMap["shop_id"] = v.ShopID
	v.fieldMap["title"] = v.Title
	v.fieldMap["sub_title"] = v.SubTitle
	v.fieldMap["rules"] = v.Rules
	v.fieldMap["pay_value"] = v.PayValue
	v.fieldMap["actual_value"] = v.ActualValue
	v.fieldMap["type"] = v.Type
	v.fieldMap["status"] = v.Status
	v.fieldMap["create_time"] = v.CreateTime
	v.fieldMap["update_time"] = v.UpdateTime

}

func (v voucher) clone(db *gorm.DB) voucher {
	v.voucherDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v voucher) replaceDB(db *gorm.DB) voucher {
	v.voucherDo.ReplaceDB(db)
	return v
}

type voucherDo struct{ gen.DO }

type IVoucherDo interface {
	gen.SubQuery
	Debug() IVoucherDo
	WithContext(ctx context.Context) IVoucherDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVoucherDo
	WriteDB() IVoucherDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVoucherDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVoucherDo
	Not(conds ...gen.Condition) IVoucherDo
	Or(conds ...gen.Condition) IVoucherDo
	Select(conds ...field.Expr) IVoucherDo
	Where(conds ...gen.Condition) IVoucherDo
	Order(conds ...field.Expr) IVoucherDo
	Distinct(cols ...field.Expr) IVoucherDo
	Omit(cols ...field.Expr) IVoucherDo
	Join(table schema.Tabler, on ...field.Expr) IVoucherDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVoucherDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVoucherDo
	Group(cols ...field.Expr) IVoucherDo
	Having(conds ...gen.Condition) IVoucherDo
	Limit(limit int) IVoucherDo
	Offset(offset int) IVoucherDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVoucherDo
	Unscoped() IVoucherDo
	Create(values ...*model.Voucher) error
	CreateInBatches(values []*model.Voucher, batchSize int) error
	Save(values ...*model.Voucher) error
	First() (*model.Voucher, error)
	Take() (*model.Voucher, error)
	Last() (*model.Voucher, error)
	Find() ([]*model.Voucher, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Voucher, err error)
	FindInBatches(result *[]*model.Voucher, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Voucher) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVoucherDo
	Assign(attrs ...field.AssignExpr) IVoucherDo
	Joins(fields ...field.RelationField) IVoucherDo
	Preload(fields ...field.RelationField) IVoucherDo
	FirstOrInit() (*model.Voucher, error)
	FirstOrCreate() (*model.Voucher, error)
	FindByPage(offset int, limit int) (result []*model.Voucher, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVoucherDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id uint64) (result *model.Voucher, err error)
}

// GetByID
// SELECT * FROM @@table WHERE id=@id
func (v voucherDo) GetByID(id uint64) (result *model.Voucher, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM tb_voucher WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (v voucherDo) Debug() IVoucherDo {
	return v.withDO(v.DO.Debug())
}

func (v voucherDo) WithContext(ctx context.Context) IVoucherDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v voucherDo) ReadDB() IVoucherDo {
	return v.Clauses(dbresolver.Read)
}

func (v voucherDo) WriteDB() IVoucherDo {
	return v.Clauses(dbresolver.Write)
}

func (v voucherDo) Session(config *gorm.Session) IVoucherDo {
	return v.withDO(v.DO.Session(config))
}

func (v voucherDo) Clauses(conds ...clause.Expression) IVoucherDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v voucherDo) Returning(value interface{}, columns ...string) IVoucherDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v voucherDo) Not(conds ...gen.Condition) IVoucherDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v voucherDo) Or(conds ...gen.Condition) IVoucherDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v voucherDo) Select(conds ...field.Expr) IVoucherDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v voucherDo) Where(conds ...gen.Condition) IVoucherDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v voucherDo) Order(conds ...field.Expr) IVoucherDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v voucherDo) Distinct(cols ...field.Expr) IVoucherDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v voucherDo) Omit(cols ...field.Expr) IVoucherDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v voucherDo) Join(table schema.Tabler, on ...field.Expr) IVoucherDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v voucherDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVoucherDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v voucherDo) RightJoin(table schema.Tabler, on ...field.Expr) IVoucherDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v voucherDo) Group(cols ...field.Expr) IVoucherDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v voucherDo) Having(conds ...gen.Condition) IVoucherDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v voucherDo) Limit(limit int) IVoucherDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v voucherDo) Offset(offset int) IVoucherDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v voucherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVoucherDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v voucherDo) Unscoped() IVoucherDo {
	return v.withDO(v.DO.Unscoped())
}

func (v voucherDo) Create(values ...*model.Voucher) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v voucherDo) CreateInBatches(values []*model.Voucher, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v voucherDo) Save(values ...*model.Voucher) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v voucherDo) First() (*model.Voucher, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Voucher), nil
	}
}

func (v voucherDo) Take() (*model.Voucher, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Voucher), nil
	}
}

func (v voucherDo) Last() (*model.Voucher, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Voucher), nil
	}
}

func (v voucherDo) Find() ([]*model.Voucher, error) {
	result, err := v.DO.Find()
	return result.([]*model.Voucher), err
}

func (v voucherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Voucher, err error) {
	buf := make([]*model.Voucher, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v voucherDo) FindInBatches(result *[]*model.Voucher, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v voucherDo) Attrs(attrs ...field.AssignExpr) IVoucherDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v voucherDo) Assign(attrs ...field.AssignExpr) IVoucherDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v voucherDo) Joins(fields ...field.RelationField) IVoucherDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v voucherDo) Preload(fields ...field.RelationField) IVoucherDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v voucherDo) FirstOrInit() (*model.Voucher, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Voucher), nil
	}
}

func (v voucherDo) FirstOrCreate() (*model.Voucher, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Voucher), nil
	}
}

func (v voucherDo) FindByPage(offset int, limit int) (result []*model.Voucher, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v voucherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v voucherDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v voucherDo) Delete(models ...*model.Voucher) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *voucherDo) withDO(do gen.Dao) *voucherDo {
	v.DO = *do.(*gen.DO)
	return v
}
