// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-dianping/internal/entity"
)

func newSign(db *gorm.DB, opts ...gen.DOOption) sign {
	_sign := sign{}

	_sign.signDo.UseDB(db, opts...)
	_sign.signDo.UseModel(&entity.Sign{})

	tableName := _sign.signDo.TableName()
	_sign.ALL = field.NewAsterisk(tableName)
	_sign.ID = field.NewUint64(tableName, "id")
	_sign.UserID = field.NewUint64(tableName, "user_id")
	_sign.Year = field.NewInt32(tableName, "year")
	_sign.Month = field.NewInt32(tableName, "month")
	_sign.Date = field.NewTime(tableName, "date")
	_sign.IsBackup = field.NewBool(tableName, "is_backup")

	_sign.fillFieldMap()

	return _sign
}

type sign struct {
	signDo

	ALL      field.Asterisk
	ID       field.Uint64 // 主键
	UserID   field.Uint64 // 用户id
	Year     field.Int32  // 签到的年
	Month    field.Int32  // 签到的月
	Date     field.Time   // 签到的日期
	IsBackup field.Bool   // 是否补签

	fieldMap map[string]field.Expr
}

func (s sign) Table(newTableName string) *sign {
	s.signDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sign) As(alias string) *sign {
	s.signDo.DO = *(s.signDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sign) updateTableName(table string) *sign {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.UserID = field.NewUint64(table, "user_id")
	s.Year = field.NewInt32(table, "year")
	s.Month = field.NewInt32(table, "month")
	s.Date = field.NewTime(table, "date")
	s.IsBackup = field.NewBool(table, "is_backup")

	s.fillFieldMap()

	return s
}

func (s *sign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sign) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["year"] = s.Year
	s.fieldMap["month"] = s.Month
	s.fieldMap["date"] = s.Date
	s.fieldMap["is_backup"] = s.IsBackup
}

func (s sign) clone(db *gorm.DB) sign {
	s.signDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sign) replaceDB(db *gorm.DB) sign {
	s.signDo.ReplaceDB(db)
	return s
}

type signDo struct{ gen.DO }

type ISignDo interface {
	gen.SubQuery
	Debug() ISignDo
	WithContext(ctx context.Context) ISignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISignDo
	WriteDB() ISignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISignDo
	Not(conds ...gen.Condition) ISignDo
	Or(conds ...gen.Condition) ISignDo
	Select(conds ...field.Expr) ISignDo
	Where(conds ...gen.Condition) ISignDo
	Order(conds ...field.Expr) ISignDo
	Distinct(cols ...field.Expr) ISignDo
	Omit(cols ...field.Expr) ISignDo
	Join(table schema.Tabler, on ...field.Expr) ISignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISignDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISignDo
	Group(cols ...field.Expr) ISignDo
	Having(conds ...gen.Condition) ISignDo
	Limit(limit int) ISignDo
	Offset(offset int) ISignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISignDo
	Unscoped() ISignDo
	Create(values ...*entity.Sign) error
	CreateInBatches(values []*entity.Sign, batchSize int) error
	Save(values ...*entity.Sign) error
	First() (*entity.Sign, error)
	Take() (*entity.Sign, error)
	Last() (*entity.Sign, error)
	Find() ([]*entity.Sign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Sign, err error)
	FindInBatches(result *[]*entity.Sign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Sign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISignDo
	Assign(attrs ...field.AssignExpr) ISignDo
	Joins(fields ...field.RelationField) ISignDo
	Preload(fields ...field.RelationField) ISignDo
	FirstOrInit() (*entity.Sign, error)
	FirstOrCreate() (*entity.Sign, error)
	FindByPage(offset int, limit int) (result []*entity.Sign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result *entity.Sign, err error)
}

// GetByID query data by id and return it as *struct*
// SELECT * FROM @@table WHERE id=@id
func (s signDo) GetByID(id int) (result *entity.Sign, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("query data by id and return it as *struct* SELECT * FROM tb_sign WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s signDo) Debug() ISignDo {
	return s.withDO(s.DO.Debug())
}

func (s signDo) WithContext(ctx context.Context) ISignDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s signDo) ReadDB() ISignDo {
	return s.Clauses(dbresolver.Read)
}

func (s signDo) WriteDB() ISignDo {
	return s.Clauses(dbresolver.Write)
}

func (s signDo) Session(config *gorm.Session) ISignDo {
	return s.withDO(s.DO.Session(config))
}

func (s signDo) Clauses(conds ...clause.Expression) ISignDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s signDo) Returning(value interface{}, columns ...string) ISignDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s signDo) Not(conds ...gen.Condition) ISignDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s signDo) Or(conds ...gen.Condition) ISignDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s signDo) Select(conds ...field.Expr) ISignDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s signDo) Where(conds ...gen.Condition) ISignDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s signDo) Order(conds ...field.Expr) ISignDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s signDo) Distinct(cols ...field.Expr) ISignDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s signDo) Omit(cols ...field.Expr) ISignDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s signDo) Join(table schema.Tabler, on ...field.Expr) ISignDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s signDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISignDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s signDo) RightJoin(table schema.Tabler, on ...field.Expr) ISignDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s signDo) Group(cols ...field.Expr) ISignDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s signDo) Having(conds ...gen.Condition) ISignDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s signDo) Limit(limit int) ISignDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s signDo) Offset(offset int) ISignDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s signDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISignDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s signDo) Unscoped() ISignDo {
	return s.withDO(s.DO.Unscoped())
}

func (s signDo) Create(values ...*entity.Sign) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s signDo) CreateInBatches(values []*entity.Sign, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s signDo) Save(values ...*entity.Sign) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s signDo) First() (*entity.Sign, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Sign), nil
	}
}

func (s signDo) Take() (*entity.Sign, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Sign), nil
	}
}

func (s signDo) Last() (*entity.Sign, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Sign), nil
	}
}

func (s signDo) Find() ([]*entity.Sign, error) {
	result, err := s.DO.Find()
	return result.([]*entity.Sign), err
}

func (s signDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Sign, err error) {
	buf := make([]*entity.Sign, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s signDo) FindInBatches(result *[]*entity.Sign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s signDo) Attrs(attrs ...field.AssignExpr) ISignDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s signDo) Assign(attrs ...field.AssignExpr) ISignDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s signDo) Joins(fields ...field.RelationField) ISignDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s signDo) Preload(fields ...field.RelationField) ISignDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s signDo) FirstOrInit() (*entity.Sign, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Sign), nil
	}
}

func (s signDo) FirstOrCreate() (*entity.Sign, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Sign), nil
	}
}

func (s signDo) FindByPage(offset int, limit int) (result []*entity.Sign, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s signDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s signDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s signDo) Delete(models ...*entity.Sign) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *signDo) withDO(do gen.Dao) *signDo {
	s.DO = *do.(*gen.DO)
	return s
}
