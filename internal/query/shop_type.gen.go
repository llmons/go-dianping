// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-dianping/internal/entity"
)

func newShopType(db *gorm.DB, opts ...gen.DOOption) shopType {
	_shopType := shopType{}

	_shopType.shopTypeDo.UseDB(db, opts...)
	_shopType.shopTypeDo.UseModel(&entity.ShopType{})

	tableName := _shopType.shopTypeDo.TableName()
	_shopType.ALL = field.NewAsterisk(tableName)
	_shopType.ID = field.NewUint64(tableName, "id")
	_shopType.Name = field.NewString(tableName, "name")
	_shopType.Icon = field.NewString(tableName, "icon")
	_shopType.Sort = field.NewUint32(tableName, "sort")
	_shopType.CreateTime = field.NewTime(tableName, "create_time")
	_shopType.UpdateTime = field.NewTime(tableName, "update_time")

	_shopType.fillFieldMap()

	return _shopType
}

type shopType struct {
	shopTypeDo

	ALL        field.Asterisk
	ID         field.Uint64 // 主键
	Name       field.String // 类型名称
	Icon       field.String // 图标
	Sort       field.Uint32 // 顺序
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s shopType) Table(newTableName string) *shopType {
	s.shopTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shopType) As(alias string) *shopType {
	s.shopTypeDo.DO = *(s.shopTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shopType) updateTableName(table string) *shopType {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Icon = field.NewString(table, "icon")
	s.Sort = field.NewUint32(table, "sort")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *shopType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shopType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s shopType) clone(db *gorm.DB) shopType {
	s.shopTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shopType) replaceDB(db *gorm.DB) shopType {
	s.shopTypeDo.ReplaceDB(db)
	return s
}

type shopTypeDo struct{ gen.DO }

type IShopTypeDo interface {
	gen.SubQuery
	Debug() IShopTypeDo
	WithContext(ctx context.Context) IShopTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShopTypeDo
	WriteDB() IShopTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShopTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShopTypeDo
	Not(conds ...gen.Condition) IShopTypeDo
	Or(conds ...gen.Condition) IShopTypeDo
	Select(conds ...field.Expr) IShopTypeDo
	Where(conds ...gen.Condition) IShopTypeDo
	Order(conds ...field.Expr) IShopTypeDo
	Distinct(cols ...field.Expr) IShopTypeDo
	Omit(cols ...field.Expr) IShopTypeDo
	Join(table schema.Tabler, on ...field.Expr) IShopTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShopTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShopTypeDo
	Group(cols ...field.Expr) IShopTypeDo
	Having(conds ...gen.Condition) IShopTypeDo
	Limit(limit int) IShopTypeDo
	Offset(offset int) IShopTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShopTypeDo
	Unscoped() IShopTypeDo
	Create(values ...*entity.ShopType) error
	CreateInBatches(values []*entity.ShopType, batchSize int) error
	Save(values ...*entity.ShopType) error
	First() (*entity.ShopType, error)
	Take() (*entity.ShopType, error)
	Last() (*entity.ShopType, error)
	Find() ([]*entity.ShopType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ShopType, err error)
	FindInBatches(result *[]*entity.ShopType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.ShopType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShopTypeDo
	Assign(attrs ...field.AssignExpr) IShopTypeDo
	Joins(fields ...field.RelationField) IShopTypeDo
	Preload(fields ...field.RelationField) IShopTypeDo
	FirstOrInit() (*entity.ShopType, error)
	FirstOrCreate() (*entity.ShopType, error)
	FindByPage(offset int, limit int) (result []*entity.ShopType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShopTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shopTypeDo) Debug() IShopTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s shopTypeDo) WithContext(ctx context.Context) IShopTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shopTypeDo) ReadDB() IShopTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s shopTypeDo) WriteDB() IShopTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s shopTypeDo) Session(config *gorm.Session) IShopTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s shopTypeDo) Clauses(conds ...clause.Expression) IShopTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shopTypeDo) Returning(value interface{}, columns ...string) IShopTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shopTypeDo) Not(conds ...gen.Condition) IShopTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shopTypeDo) Or(conds ...gen.Condition) IShopTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shopTypeDo) Select(conds ...field.Expr) IShopTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shopTypeDo) Where(conds ...gen.Condition) IShopTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shopTypeDo) Order(conds ...field.Expr) IShopTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shopTypeDo) Distinct(cols ...field.Expr) IShopTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shopTypeDo) Omit(cols ...field.Expr) IShopTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shopTypeDo) Join(table schema.Tabler, on ...field.Expr) IShopTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shopTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShopTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shopTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IShopTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shopTypeDo) Group(cols ...field.Expr) IShopTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shopTypeDo) Having(conds ...gen.Condition) IShopTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shopTypeDo) Limit(limit int) IShopTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shopTypeDo) Offset(offset int) IShopTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shopTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShopTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shopTypeDo) Unscoped() IShopTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shopTypeDo) Create(values ...*entity.ShopType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shopTypeDo) CreateInBatches(values []*entity.ShopType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shopTypeDo) Save(values ...*entity.ShopType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shopTypeDo) First() (*entity.ShopType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShopType), nil
	}
}

func (s shopTypeDo) Take() (*entity.ShopType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShopType), nil
	}
}

func (s shopTypeDo) Last() (*entity.ShopType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShopType), nil
	}
}

func (s shopTypeDo) Find() ([]*entity.ShopType, error) {
	result, err := s.DO.Find()
	return result.([]*entity.ShopType), err
}

func (s shopTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ShopType, err error) {
	buf := make([]*entity.ShopType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shopTypeDo) FindInBatches(result *[]*entity.ShopType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shopTypeDo) Attrs(attrs ...field.AssignExpr) IShopTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shopTypeDo) Assign(attrs ...field.AssignExpr) IShopTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shopTypeDo) Joins(fields ...field.RelationField) IShopTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shopTypeDo) Preload(fields ...field.RelationField) IShopTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shopTypeDo) FirstOrInit() (*entity.ShopType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShopType), nil
	}
}

func (s shopTypeDo) FirstOrCreate() (*entity.ShopType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ShopType), nil
	}
}

func (s shopTypeDo) FindByPage(offset int, limit int) (result []*entity.ShopType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shopTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shopTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shopTypeDo) Delete(models ...*entity.ShopType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shopTypeDo) withDO(do gen.Dao) *shopTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
