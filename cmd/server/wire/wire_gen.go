// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/spf13/viper"
	"go-dianping/internal/base/cache_client"
	"go-dianping/internal/base/redis_worker"
	"go-dianping/internal/handler"
	"go-dianping/internal/repository"
	"go-dianping/internal/server"
	"go-dianping/internal/service"
	"go-dianping/pkg/app"
	"go-dianping/pkg/log"
	"go-dianping/pkg/redis"
	"go-dianping/pkg/server/http"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	client := redis.NewRedis(viperViper)
	handlerHandler := handler.NewHandler(logger)
	db := repository.NewDB(viperViper, logger)
	query := repository.NewQuery(db)
	repositoryRepository := repository.NewRepository(query, logger)
	transaction := repository.NewTransaction(repositoryRepository)
	serviceService := service.NewService(logger, viperViper, client, transaction)
	shopRepository := repository.NewShopRepository(repositoryRepository)
	cacheClient := cache_client.NewCacheClientForShop(client)
	shopService := service.NewShopService(serviceService, shopRepository, cacheClient)
	shopHandler := handler.NewShopHandler(handlerHandler, shopService)
	shopTypeRepository := repository.NewShopTypeRepository(repositoryRepository)
	shopTypeService := service.NewShopTypeService(serviceService, shopTypeRepository)
	shopTypeHandler := handler.NewShopTypeHandler(handlerHandler, shopTypeService)
	userRepository := repository.NewUserRepository(repositoryRepository)
	userService := service.NewUserService(serviceService, userRepository)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	voucherRepository := repository.NewVoucherRepository(repositoryRepository)
	seckillVoucherRepository := repository.NewSeckillVoucherRepository(repositoryRepository)
	voucherService := service.NewVoucherService(serviceService, voucherRepository, seckillVoucherRepository)
	voucherHandler := handler.NewVoucherHandler(handlerHandler, voucherService)
	voucherOrderRepository := repository.NewVoucherOrderRepository(repositoryRepository)
	redisWorker := redis_worker.NewRedisWorker(client)
	voucherOrderService := service.NewVoucherOrderService(serviceService, voucherOrderRepository, seckillVoucherRepository, redisWorker)
	voucherOrderHandler := handler.NewVoucherOrderHandler(handlerHandler, voucherOrderService)
	httpServer := server.NewHTTPServer(logger, viperViper, client, shopHandler, shopTypeHandler, userHandler, voucherHandler, voucherOrderHandler)
	appApp := newApp(httpServer)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewQuery, repository.NewTransaction, repository.NewRepository, repository.NewSeckillVoucherRepository, repository.NewShopRepository, repository.NewShopTypeRepository, repository.NewUserRepository, repository.NewVoucherRepository, repository.NewVoucherOrderRepository)

var cacheClientSet = wire.NewSet(cache_client.NewCacheClientForShop)

var redisWorkerSet = wire.NewSet(redis_worker.NewRedisWorker)

var serviceSet = wire.NewSet(service.NewService, service.NewSeckillVoucherService, service.NewShopService, service.NewShopTypeService, service.NewUserService, service.NewVoucherService, service.NewVoucherOrderService)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewShopHandler, handler.NewShopTypeHandler, handler.NewUserHandler, handler.NewVoucherHandler, handler.NewVoucherOrderHandler)

var serverSet = wire.NewSet(redis.NewRedis, server.NewHTTPServer)

// build App
func newApp(
	httpServer *http.Server,
) *app.App {
	return app.NewApp(app.WithServer(httpServer), app.WithName("go-dianping"))
}
