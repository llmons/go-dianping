// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/spf13/viper"
	"go-dianping/internal/handler"
	"go-dianping/internal/repository"
	"go-dianping/internal/server"
	"go-dianping/internal/service"
	"go-dianping/pkg/log"
	"go-dianping/pkg/redis"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*gin.Engine, func(), error) {
	client := redis.NewRedis(viperViper)
	handlerHandler := handler.NewHandler(logger)
	db := repository.NewDB(viperViper, logger)
	query := repository.NewQuery(db)
	repositoryRepository := repository.NewRepository(query, logger)
	serviceService := service.NewService(logger, viperViper, repositoryRepository, client)
	userService := service.NewUserService(serviceService)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	shopService := service.NewShopService(serviceService)
	shopHandler := handler.NewShopHandler(handlerHandler, shopService)
	shopTypeService := service.NewShopTypeService(serviceService)
	shopTypeHandler := handler.NewShopTypeHandler(handlerHandler, shopTypeService)
	engine := server.NewHttpServer(logger, client, userHandler, shopHandler, shopTypeHandler)
	return engine, func() {
	}, nil
}

// wire.go:

var ServerSet = wire.NewSet(redis.NewRedis, server.NewHttpServer)

var RepositorySet = wire.NewSet(repository.NewDB, repository.NewQuery, repository.NewRepository)

var ServiceSet = wire.NewSet(service.NewService, service.NewUserService, service.NewShopService, service.NewShopTypeService)

var HandlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler, handler.NewShopHandler, handler.NewShopTypeHandler)
